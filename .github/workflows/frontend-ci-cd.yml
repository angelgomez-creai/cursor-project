name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # ---------------------------------------------------------------------------
  # Job 1: Lint and Type Check
  # ---------------------------------------------------------------------------
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ./frontend
        run: pnpm run lint

      - name: Run TypeScript type check
        working-directory: ./frontend
        run: pnpm exec tsc --noEmit

  # ---------------------------------------------------------------------------
  # Job 2: Testing with Jest
  # ---------------------------------------------------------------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Run Jest tests
        working-directory: ./frontend
        run: pnpm run test:ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-html
          path: frontend/coverage/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: frontend/coverage/

  # ---------------------------------------------------------------------------
  # Job 3: Build Optimized
  # ---------------------------------------------------------------------------
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: ./frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:8000' }}
          NODE_ENV: production
        run: |
          pnpm run build
          echo "Build size:"
          du -sh dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 30

      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find frontend/dist -type f -name "*.js" -exec du -h {} \; | sort -rh | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # Job 4: Lighthouse CI
  # ---------------------------------------------------------------------------
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: ./frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:8000' }}
        run: pnpm run build

      - name: Install Lighthouse CI
        run: |
          npm install -g @lhci/cli

      - name: Run Lighthouse CI
        working-directory: ./frontend
        run: |
          pnpm run preview &
          sleep 10
          lhci autorun
        continue-on-error: true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: frontend/.lighthouseci/
          retention-days: 30

  # ---------------------------------------------------------------------------
  # Job 5: Build and Push Docker Image
  # ---------------------------------------------------------------------------
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}-${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.build.outputs.digest }}"

  # ---------------------------------------------------------------------------
  # Job 6: Create Multi-Platform Manifest
  # ---------------------------------------------------------------------------
  manifest:
    name: Create Multi-Platform Manifest
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest
        run: |
          export IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
          docker buildx imagetools create --tag $IMAGE_TAG \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${{ github.sha }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${{ github.sha }}

  # ---------------------------------------------------------------------------
  # Job 7: Deploy to S3 and CloudFront
  # ---------------------------------------------------------------------------
  deploy:
    name: Deploy to S3/CloudFront
    runs-on: ubuntu-latest
    needs: [manifest, lighthouse]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ secrets.AWS_CLOUDFRONT_DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Deploy to S3
        run: |
          aws s3 sync frontend/dist/ s3://${{ secrets.AWS_S3_BUCKET }} \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js"

      - name: Deploy HTML files (no cache)
        run: |
          aws s3 sync frontend/dist/ s3://${{ secrets.AWS_S3_BUCKET }} \
            --delete \
            --cache-control "no-cache, no-store, must-revalidate" \
            --exclude "*" \
            --include "*.html" \
            --include "service-worker.js"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Verify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          echo "S3 Bucket: ${{ secrets.AWS_S3_BUCKET }}"
          echo "CloudFront Distribution: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}"
          echo "URL: https://${{ secrets.AWS_CLOUDFRONT_DOMAIN }}"
