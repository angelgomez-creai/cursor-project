name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend
  PYTHON_VERSION: '3.11'

jobs:
  # ---------------------------------------------------------------------------
  # Job 1: Lint and Format Check
  # ---------------------------------------------------------------------------
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          pip install --upgrade pip
          pip install black flake8 mypy isort

      - name: Run Black (format check)
        run: |
          black --check --diff backend/src backend/tests || true

      - name: Run isort (import sorting)
        run: |
          isort --check-only --diff backend/src backend/tests || true

      - name: Run Flake8
        run: |
          flake8 backend/src backend/tests --max-line-length=120 --extend-ignore=E203,W503 || true

      - name: Run MyPy (type checking)
        run: |
          mypy backend/src --ignore-missing-imports --no-strict-optional || true

  # ---------------------------------------------------------------------------
  # Job 2: Security Scanning
  # ---------------------------------------------------------------------------
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          pip install --upgrade pip
          pip install bandit safety bandit[toml]

      - name: Run Bandit (security linting)
        working-directory: ./backend
        run: |
          bandit -r src -f json -o bandit-report.json || true
          bandit -r src -f screen
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: backend/bandit-report.json

      - name: Run Safety (dependency vulnerability check)
        working-directory: ./backend
        run: |
          safety check --json --output safety-report.json || true
          safety check
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        continue-on-error: true

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: backend/safety-report.json

  # ---------------------------------------------------------------------------
  # Job 3: Testing
  # ---------------------------------------------------------------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint, security]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET_KEY: test-secret-key-for-testing
          ENVIRONMENT: test
          DEBUG: false
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term || true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-html
          path: backend/htmlcov/

  # ---------------------------------------------------------------------------
  # Job 4: Build and Push Docker Image (Multi-platform)
  # ---------------------------------------------------------------------------
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.build.outputs.digest }}"

  # ---------------------------------------------------------------------------
  # Job 5: Create Multi-Platform Manifest
  # ---------------------------------------------------------------------------
  manifest:
    name: Create Multi-Platform Manifest
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest
        run: |
          export IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
          docker buildx imagetools create --tag $IMAGE_TAG \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${{ github.sha }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${{ github.sha }}

  # ---------------------------------------------------------------------------
  # Job 6: Deploy to AWS ECS
  # ---------------------------------------------------------------------------
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [manifest]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ secrets.AWS_ECS_CLUSTER }}.us-east-1.amazonaws.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update ECS task definition and deploy
        id: task-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ secrets.AWS_ECS_TASK_DEFINITION }}
          service: ${{ secrets.AWS_ECS_SERVICE }}
          cluster: ${{ secrets.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-service-stability-delay: 30
          container-name: backend
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Verify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          echo "Cluster: ${{ secrets.AWS_ECS_CLUSTER }}"
          echo "Service: ${{ secrets.AWS_ECS_SERVICE }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
