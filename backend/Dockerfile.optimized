# =============================================================================
# Ultra-Optimized Dockerfile for Backend (Alternative)
# Maximum size reduction with security hardening
# =============================================================================

# -----------------------------------------------------------------------------
# Stage 1: Build dependencies
# -----------------------------------------------------------------------------
FROM python:3.11-alpine AS build-deps

# Install build dependencies
RUN apk add --no-cache --virtual .build-deps \
    gcc \
    g++ \
    musl-dev \
    postgresql-dev \
    linux-headers

WORKDIR /build

# Copy and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# -----------------------------------------------------------------------------
# Stage 2: Production runtime
# -----------------------------------------------------------------------------
FROM python:3.11-alpine AS production

# Security: Create non-root user first
RUN addgroup -g 1000 -S appuser && \
    adduser -S -D -H -u 1000 -h /app -s /sbin/nologin -G appuser appuser

# Install only runtime dependencies
RUN apk add --no-cache \
    curl \
    libpq \
    && rm -rf /var/cache/apk/* /tmp/*

# Set environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH=/home/appuser/.local/bin:$PATH \
    PYTHONUSERBASE=/home/appuser/.local

WORKDIR /app

# Copy Python packages from build stage
COPY --from=build-deps --chown=appuser:appuser /root/.local /home/appuser/.local

# Copy application code
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser main.py .
COPY --chown=appuser:appuser docker-entrypoint.sh /docker-entrypoint.sh

# Remove Python cache files
RUN find /home/appuser/.local -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true && \
    find /home/appuser/.local -type f -name "*.pyc" -delete && \
    find /home/appuser/.local -type f -name "*.pyo" -delete

# Set permissions
RUN chmod +x /docker-entrypoint.sh && \
    chmod -R 755 /app

USER appuser

EXPOSE 8000

HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

ENTRYPOINT ["/docker-entrypoint.sh"]

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--log-level", "info", "--no-access-log"]

