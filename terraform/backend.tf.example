# ============================================
# Terraform Backend Configuration Example
# ============================================
# Copy this to backend.tf and configure for remote state
# Requires S3 bucket and DynamoDB table for state locking

terraform {
  backend "s3" {
    # Bucket for storing state
    bucket = "your-terraform-state-bucket"
    
    # Key path in bucket
    key = "ecommerce/terraform.tfstate"
    
    # AWS region
    region = "us-east-1"
    
    # Enable encryption
    encrypt = true
    
    # DynamoDB table for state locking (prevents concurrent modifications)
    dynamodb_table = "terraform-state-lock"
    
    # Optional: Enable versioning
    # versioning = true
  }
}

# ============================================
# Pre-requisites: Create S3 bucket and DynamoDB table
# ============================================

# 1. Create S3 bucket for state:
# aws s3 mb s3://your-terraform-state-bucket --region us-east-1
# aws s3api put-bucket-versioning \
#   --bucket your-terraform-state-bucket \
#   --versioning-configuration Status=Enabled
# aws s3api put-bucket-encryption \
#   --bucket your-terraform-state-bucket \
#   --server-side-encryption-configuration '{
#     "Rules": [{
#       "ApplyServerSideEncryptionByDefault": {
#         "SSEAlgorithm": "AES256"
#       }
#     }]
#   }'

# 2. Create DynamoDB table for locking:
# aws dynamodb create-table \
#   --table-name terraform-state-lock \
#   --attribute-definitions AttributeName=LockID,AttributeType=S \
#   --key-schema AttributeName=LockID,KeyType=HASH \
#   --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
#   --region us-east-1

